package utils;

import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
public class Config {
    private static Properties properties = new Properties();
    
    static {
        loadConfig();
    }
    
    private static void loadConfig() {
        try (InputStream input = Config.class.getClassLoader().getResourceAsStream("config.properties")) {
            if (input != null) {
                properties.load(input);
            }
        } catch (IOException e) {
            System.err.println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: " + e.getMessage());
        }
    }
    
    // ==================== API –ù–ê–°–¢–†–û–ô–ö–ò ====================
    
    public static String getBaseUrl() {
        return getProperty("api.base.url", "https://jsonplaceholder.typicode.com");
    }
    
    public static int getConnectionTimeout() {
        return getIntProperty("api.connection.timeout", 30000);
    }
    
    public static int getSocketTimeout() {
        return getIntProperty("api.socket.timeout", 30000);
    }
    
    public static int getRetryCount() {
        return getIntProperty("api.retry.count", 3);
    }
    
    // ==================== UI –ù–ê–°–¢–†–û–ô–ö–ò ====================
    
    public static boolean isHeadless() {
        return getBooleanProperty("ui.headless", false);
    }
    
    public static int getTimeout() {
        return getIntProperty("ui.timeout", 10);
    }
    
    public static int getPageLoadTimeout() {
        return getIntProperty("ui.page.load.timeout", 30);
    }
    
    public static String getBrowser() {
        String browser = getProperty("ui.browser", "chrome");
        System.out.println("üîß Config: –ü–æ–ª—É—á–µ–Ω –±—Ä–∞—É–∑–µ—Ä: " + browser);
        System.out.println("üîß Config: –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ ui.browser: " + System.getProperty("ui.browser"));
        System.out.println("üîß Config: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è UI_BROWSER: " + System.getenv("UI_BROWSER"));
        return browser;
    }
    
    public static String getWindowSize() {
        return getProperty("ui.window.size", "1920,1080");
    }
    
    public static boolean isScreenshotOnFailure() {
        return getBooleanProperty("ui.screenshot.on.failure", true);
    }
    
    // ==================== E2E –ù–ê–°–¢–†–û–ô–ö–ò ====================
    
    public static String getSauceDemoUrl() {
        return getProperty("e2e.saucedemo.url", "https://www.saucedemo.com");
    }
    
    public static String getGoogleUrl() {
        return getProperty("e2e.google.url", "https://www.google.com");
    }
    
    public static String getYouTubeUrl() {
        return getProperty("e2e.youtube.url", "https://www.youtube.com");
    }
    
    // ==================== ALLURE –ù–ê–°–¢–†–û–ô–ö–ò ====================
    
    public static String getAllureResultsDirectory() {
        return getProperty("allure.results.directory", "target/allure-results");
    }
    
    public static boolean isAllureEnabled() {
        return getBooleanProperty("allure.enabled", true);
    }
    
    // ==================== –û–ë–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò ====================
    
    public static String getEnvironment() {
        return getProperty("environment", "test");
    }
    
    public static boolean isDebugMode() {
        return getBooleanProperty("debug.mode", false);
    }
    
    public static int getThreadCount() {
        return getIntProperty("thread.count", 1);
    }
    
    // ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================
    
    public static String get(String key) {
        return properties.getProperty(key);
    }
    
    public static String get(String key, String defaultValue) {
        return properties.getProperty(key, defaultValue);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º: System Property > Environment Variable > Config File
     */
    private static String getProperty(String key, String defaultValue) {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        String systemProperty = System.getProperty(key);
        if (systemProperty != null) {
            return systemProperty;
        }
        
        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        String envVariable = System.getenv(key.toUpperCase().replace(".", "_"));
        if (envVariable != null) {
            return envVariable;
        }
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        return properties.getProperty(key, defaultValue);
    }
    
    private static int getIntProperty(String key, int defaultValue) {
        String value = getProperty(key, String.valueOf(defaultValue));
        try {
            return Integer.parseInt(value);
        } catch (NumberFormatException e) {
            System.err.println("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è " + key + ": " + value + ", –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: " + defaultValue);
            return defaultValue;
        }
    }
    
    private static boolean getBooleanProperty(String key, boolean defaultValue) {
        String value = getProperty(key, String.valueOf(defaultValue));
        return Boolean.parseBoolean(value);
    }
    
    /**
     * –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
     */
    public static void printAllSettings() {
        System.out.println("=== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–†–û–ï–ö–¢–ê ===");
        System.out.println("API Base URL: " + getBaseUrl());
        System.out.println("UI Headless: " + isHeadless());
        System.out.println("UI Timeout: " + getTimeout() + "s");
        System.out.println("Browser: " + getBrowser());
        System.out.println("Environment: " + getEnvironment());
        System.out.println("Debug Mode: " + isDebugMode());
        System.out.println("Thread Count: " + getThreadCount());
        System.out.println("========================");
    }
}
